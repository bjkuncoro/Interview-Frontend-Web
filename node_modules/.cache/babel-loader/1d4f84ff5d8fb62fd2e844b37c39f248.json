{"ast":null,"code":"/* eslint-disable */\nimport { all, takeEvery, put, call, select, take } from 'redux-saga/effects';\nimport { REHYDRATE } from 'redux-persist/lib/constants';\nimport { login } from '../../service/login.service';\nexport function* LOGIN({\n  payload\n}) {\n  // const history = useHistory()\n  const {\n    email,\n    password\n  } = payload;\n  const success = yield call(login, email, password);\n  console.log(success);\n\n  if (success) {\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        userInfo: success,\n        authenticated: true\n      }\n    });\n  }\n\n  if (!success) {\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        loading: false\n      }\n    });\n  }\n}\n_c = LOGIN;\nexport default function* rootSaga() {\n  console.log('Waiting for rehydration');\n  yield take(REHYDRATE); // Wait for rehydrate to prevent sagas from running with empty store\n\n  console.log('Rehydrated');\n  yield all([takeEvery('user/LOGIN', LOGIN)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LOGIN\");","map":{"version":3,"sources":["/Users/bagusjatikuncoro/Documents/Project/moduit-fe-codingtest/src/redux/user/index.js"],"names":["all","takeEvery","put","call","select","take","REHYDRATE","login","LOGIN","payload","email","password","success","console","log","type","userInfo","authenticated","loading","rootSaga"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,KAAT,QAAsB,6BAAtB;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClC;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,OAA5B;AACA,QAAMG,OAAO,GAAG,MAAMT,IAAI,CAACI,KAAD,EAAQG,KAAR,EAAeC,QAAf,CAA1B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAIA,OAAJ,EAAa;AACX,UAAMV,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,gBADE;AAERN,MAAAA,OAAO,EAAE;AACPO,QAAAA,QAAQ,EAAEJ,OADH;AAEPK,QAAAA,aAAa,EAAE;AAFR;AAFD,KAAD,CAAT;AAOD;;AACD,MAAI,CAACL,OAAL,EAAc;AACZ,UAAMV,GAAG,CAAC;AACRa,MAAAA,IAAI,EAAE,gBADE;AAERN,MAAAA,OAAO,EAAE;AACPS,QAAAA,OAAO,EAAE;AADF;AAFD,KAAD,CAAT;AAMD;AACF;KAtBgBV,K;AAyBjB,eAAe,UAAUW,QAAV,GAAqB;AAClCN,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,QAAMT,IAAI,CAACC,SAAD,CAAV,CAFkC,CAEZ;;AACtBO,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMd,GAAG,CAAC,CACRC,SAAS,CAAC,YAAD,EAAeO,KAAf,CADD,CAAD,CAAT;AAGD","sourcesContent":["/* eslint-disable */\nimport { all, takeEvery, put, call, select, take } from 'redux-saga/effects'\nimport { REHYDRATE } from 'redux-persist/lib/constants'\nimport { login } from '../../service/login.service'\n\nexport function* LOGIN({ payload }) {\n  // const history = useHistory()\n  const { email, password } = payload\n  const success = yield call(login, email, password)\n  console.log(success)\n  if (success) {\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        userInfo: success,\n        authenticated: true,\n      },\n    })\n  }\n  if (!success) {\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        loading: false,\n      },\n    })\n  }\n}\n\n\nexport default function* rootSaga() {\n  console.log('Waiting for rehydration')\n  yield take(REHYDRATE) // Wait for rehydrate to prevent sagas from running with empty store\n  console.log('Rehydrated')\n  yield all([\n    takeEvery('user/LOGIN', LOGIN),\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}