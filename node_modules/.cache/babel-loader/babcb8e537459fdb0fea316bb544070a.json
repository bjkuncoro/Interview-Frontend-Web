{"ast":null,"code":"var _jsxFileName = \"/Users/bagusjatikuncoro/Documents/Project/moduit-fe-codingtest/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { routes } from './router';\nimport Landing from './pages/landing';\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Root = props => {\n  _s();\n\n  const [anim, setAnim] = useState('');\n  useEffect(() => {// console.log(routes)\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(PersistGate, {\n        loading: null,\n        persistor: persistor,\n        children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n          basename: `/`,\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: `/`,\n              component: Landing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this), routes.unProtectedView.map(i => {\n              return /*#__PURE__*/_jsxDEV(Route, {\n                path: `${process.env.REACT_APP_PUBLIC_URL}${i.path}`,\n                component: i.Component\n              }, i.path, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Root, \"5fwVN0bJXvajpeC/yNY6lMTuu8g=\");\n\n_c = Root;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 65,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\nserviceWorker.unregister();\n\nvar _c;\n\n$RefreshReg$(_c, \"Root\");","map":{"version":3,"sources":["/Users/bagusjatikuncoro/Documents/Project/moduit-fe-codingtest/src/index.js"],"names":["React","Fragment","useState","useEffect","ReactDOM","App","reportWebVitals","PersistGate","BrowserRouter","Switch","Route","Redirect","serviceWorker","Provider","store","persistor","CSSTransition","TransitionGroup","routes","Landing","ChakraProvider","Root","props","anim","setAnim","unProtectedView","map","i","process","env","REACT_APP_PUBLIC_URL","path","Component","render","document","getElementById","unregister"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,QAAzB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAAQC,aAAR,EAAsBC,MAAtB,EAA6BC,KAA7B,EAAmCC,QAAnC,QAAkD,kBAAlD;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAAQC,KAAR,EAAcC,SAAd,QAA8B,SAA9B;AACA,SAASC,aAAT,EAAuBC,eAAvB,QAA8C,wBAA9C;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AAGA,MAAMC,IAAI,GAAIC,KAAD,IAAS;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEW,KAAjB;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,OAAO,EAAE,IAAtB;AAA4B,QAAA,SAAS,EAAEC,SAAvC;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,QAAQ,EAAG,GAA1B;AAAA,iCACE,QAAC,MAAD;AAAA,oCACE,QAAC,KAAD;AAAO,cAAA,KAAK,MAAZ;AAAa,cAAA,IAAI,EAAG,GAApB;AAAwB,cAAA,SAAS,EAAEI;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGD,MAAM,CAACO,eAAP,CAAuBC,GAAvB,CAA2BC,CAAC,IAAE;AAC7B,kCACE,QAAC,KAAD;AAAoB,gBAAA,IAAI,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,GAAEH,CAAC,CAACI,IAAK,EAAvE;AAA0E,gBAAA,SAAS,EAAEJ,CAAC,CAACK;AAAvF,iBAAYL,CAAC,CAACI,IAAd;AAAA;AAAA;AAAA;AAAA,sBADF;AAGD,aAJA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CA5CD;;GAAMV,I;;KAAAA,I;AA+CNjB,QAAQ,CAAC6B,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,cAAD;AAAA,2BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAMGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANH,E,CASA;AACA;AACA;;AACA7B,eAAe;AACfM,aAAa,CAACwB,UAAd","sourcesContent":["import React, { Fragment,useState,useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport {BrowserRouter,Switch,Route,Redirect} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {store,persistor} from './store'\nimport { CSSTransition,TransitionGroup } from 'react-transition-group'\nimport {routes} from './router';\nimport Landing from './pages/landing';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n\nconst Root = (props)=>{\n  const [anim, setAnim] = useState('')\n\n  useEffect(() => {\n    // console.log(routes)\n  }, [])\n  return (\n    <Fragment>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <BrowserRouter basename={`/`}>\n            <Switch>\n              <Route exact path={`/`} component={Landing} />\n              {routes.unProtectedView.map(i=>{\n                return(\n                  <Route key={i.path} path={`${process.env.REACT_APP_PUBLIC_URL}${i.path}`} component={i.Component} />\n                )\n              })}\n              {/* <App>\n                <Route exact path={`${process.env.REACT_APP_PUBLIC_URL}/`} render={() => {\n                    return (<Redirect to={`${process.env.REACT_APP_PUBLIC_URL}/beranda`} />)\n                }} />\n                <TransitionGroup>\n                  {routes.protectedView.map(({ path, Component }) => (\n                    <Route key={path}  exact  path={`${process.env.REACT_APP_PUBLIC_URL}${path}`}>\n                        {({ match }) => (\n                            <CSSTransition \n                              in={match != null}\n                              timeout={100}\n                              classNames={anim} \n                              unmountOnExit>\n                              <div><Component/></div>\n                            </CSSTransition> \n                        )}\n                    </Route>\n                    ))}\n              </TransitionGroup> \n            </App> */}\n            </Switch>\n          </BrowserRouter>\n        </PersistGate>\n      </Provider>\n    </Fragment>\n  )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Root />\n    </ChakraProvider>\n  </React.StrictMode>\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}